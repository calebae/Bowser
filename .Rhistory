sizes = c(3,4,5,6),
ints = c(200,300,400),
parallel = TRUE,
cores = 15,
seed = 1)
dat
dim(dat)
dat <- getSimCohortReplicate(mask.img = mask_dat,
background.img = background_dat,
R = 100,
N = 100,
Ks = c(2,3,4,5),
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400),
parallel = TRUE,
cores = 15,
seed = 1)
tmp <- microbenchmark::microbenchmark(
getSimCohortReplicate(mask.img = mask_dat, background.img = background_dat,
R = 10, N = 1, Ks = c(2,3,4,5),
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(2,3,4,5,6), ints = c(100,200,300,400),
parallel = TRUE, cores = 10, seed = 1),
getSimCohortReplicate(mask.img = mask_dat, background.img = background_dat,
R = 10, N = 1, Ks = c(2,3,4,5),
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(2,3,4,5,6), ints = c(100,200,300,400),
parallel = FALSE, cores = 10, seed = 1), times = 10
)
bowser_estimate <- array(0, dim = c(100,100))
for(i in 1:100){
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img)
}
}
warnings()
bowser_estimate
match_cluster <- rep(NA, 100)
for(i in 1:100){
match_cluster[i] <- sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
}
MAE_cluster <- rep(NA, 100)
for(i in 1:100){
MAE_cluster[i] <- mean(abs(bowser_estimate[,i] - cohort_replicate$N.cluster.rep[,i]))
}
match_cluster
MAE_cluster
?saveRDS
saveRDS(dat, "rep_K2345_S3456I234.rds")
cohort_replicate2 <- cohort_replicate
cohort_dat <- dat
bowser_estimate <- array(0, dim = c(100,100))
for(i in 1:100){
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img)
}
}
match_cluster <- rep(NA, 100)
for(i in 1:100){
match_cluster[i] <- sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
}
MAE_cluster <- rep(NA, 100)
for(i in 1:100){
MAE_cluster[i] <- mean(abs(bowser_estimate[,i] - cohort_replicate$N.cluster.rep[,i]))
}
match_cluster
cohort_replicate$N.cluster.rep
MAE_cluster
bowser_estimate
cbind(bowser_estimate[,1], cohort_replicate$N.cluster.rep[,1])
cohort_dat = system.file("extdata", "sim_dat.rds", package = "Bowser")
cohort_replicate = readRDS(cohort_dat)
mean(match_cluster)
bowser_estimate <- array(0, dim = c(100,100))
i = 1
j = 1
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser(img)
cohort_replicate$N.cluster.rep[1,1]
j = 2
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser(img)
cohort_replicate$N.cluster.rep[2,1]
?bowser
bowser(img, r=5 , vacuum.size = 20)
bowser(img, r=5 , vacuum.size = 30)
bowser(img, r=6 , vacuum.size = 30)
bowser(img, r=6 , vacuum.size = 20)
j - 1
j = 1
cohort_replicate$cohort.replicate[,,j,i]
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser(img, r=6 , vacuum.size = 20)
bowser_estimate <- array(0, dim = c(100,100))
i = 1
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6 , vacuum.size = 20)
}
i = 1
sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6 , vacuum.size = 30)
}
sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
match_cluster
bowser(img, r=7 , vacuum.size = 30)
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=7 , vacuum.size = 30)
}
sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
i
i
j
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6 , vacuum.size = 10)
}
i
j
sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
bowser_estimate[,1]
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6 , vacuum.size = 20)
}
bowser_estimate[,1]
bowser(img, r=6 , vacuum.size = 20)
bowser(img, r=7 , vacuum.size = 20)
bowser(img, r=3 , vacuum.size = 20)
bowser(img, r=5 , vacuum.size = 20)
bowser(img, r=6 , vacuum.size = 20)
bowser(img, r=6 , vacuum.size = 30)
bowser_estimate <- array(0, dim = c(100,100))
for(i in 1:100){
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6 , vacuum.size = 20)
}
}
?Mclust
interactive()
#' Unsupervised bayesian method to estimate the number of clusters
#'
#' @param image.mat Raw image which the number of clusters should be estimated
#' @param interval.size Interval size that used when binarize the image
#' @param r Width of the neighborhood when applying the median filtering
#' @param vacuum.size Minimum size of clusters
#'
#' @return
#' @export
#'
bowser <- function(image.mat, interval.size = 0.1, r = 6, vacuum.size = 30){
image.mat[image.mat==0] <- NA
datForClustr <- image.mat[!is.na(image.mat)]
result <- Mclust(datForClustr, G=1:2, interactive = FALSE)
den1 <- density(datForClustr[result$classification==1])
den2 <- density(datForClustr[result$classification==2])
intersection.point <- getCutoff(result, density1 = den1, density2 = den2, interval = interval.size)
image.ROI <- Binarize(image.mat, intersection.point)
k <- shapeKernel(c(r,r), type="box")
image.Filtered <- mmand::medianFilter(image.ROI, k)
q <- shapeKernel(c(2,2), type = "box")
image.Connected <- mmand::components(image.Filtered, q)
if(sum(!is.na(image.Connected)) !=0){
image.Vacuum <- Vacuum(image.Connected, size = vacuum.size)
image.final <- mmand::components(image.Vacuum, q)
num.Cluster <- max(image.final, na.rm=T)}else{
num.Cluster = 0
}
return(num.Cluster)
}
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(extrantsr) # For image analysis
library(neurobase) # For image analysis
library(rdist) # For image analysis
library(mclust) # For fitting a mixture of normal distribution
library(mmand) # For median filtering and connecting component
match_cluster <- rep(NA, 100)
for(i in 1:100){
match_cluster[i] <- sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
}
match_cluster
mean(match_cluster)
cohort_dat = system.file("extdata", "sim_dat.rds", package = "Bowser")
cohort_replicate = readRDS(cohort_dat)
MAE_cluster <- rep(NA, 100)
for(i in 1:100){
MAE_cluster[i] <- mean(abs(bowser_estimate[,i] - cohort_replicate$N.cluster.rep[,i]))
}
MAE_cluster
abs(bowser_estimate[,i] - cohort_replicate$N.cluster.rep[,i])
abs(bowser_estimate[,2] - cohort_replicate$N.cluster.rep[,2])
j = 81
i - 2
i = 2
img <- cohort_replicate$cohort.replicate[,,j,i]
image(img)
bowser(img, r=6 , vacuum.size = 20)
image.mat <- img
image.mat[image.mat==0] <- NA
datForClustr <- image.mat[!is.na(image.mat)]
result <- Mclust(datForClustr, G=1:2, interactive = FALSE)
den1 <- density(datForClustr[result$classification==1])
den2 <- density(datForClustr[result$classification==2])
interval.size
intersection.point <- getCutoff(result, density1 = den1, density2 = den2, interval = interval.size)
image.ROI <- Binarize(image.mat, intersection.point)
k <- shapeKernel(c(r,r), type="box")
image.Filtered <- mmand::medianFilter(image.ROI, k)
image(image.Filtered)
image(image.mat)
cohort_replicate$N.cluster.rep[j,i]
q <- shapeKernel(c(2,2), type = "box")
image.Connected <- mmand::components(image.Filtered, q)
sum(!is.na(image.Connected)) !=0
image.Vacuum <- Vacuum(image.Connected, size = vacuum.size)
image.final <- mmand::components(image.Vacuum, q)
image.final
max(image.final, na.rm=T)
length(unique(as.vector(image.final)))
?unique
length(unique(as.vector(image.final[!is.na(image.final)])))
cohort_replicate2[j,i]
imagee(cohort_replicate2[,,j,i])
imagee(cohort_replicate2$cohort.replicate[,,j,i])
image(cohort_replicate2$cohort.replicate[,,j,i])
image(dat$cohort.replicate[,,j,i])
image.dat <- dat$cohort.replicate[,,j,i]
bowser(image.dat)
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(extrantsr) # For image analysis
library(neurobase) # For image analysis
library(rdist) # For image analysis
library(mclust) # For fitting a mixture of normal distribution
library(mmand) # For median filtering and connecting component
bowser_estimate <- array(0, dim = c(100,100))
for(i in 1:100){
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6, vacuum.size = 10)
}
}
j
i
bowser_estimate[,1]
bowser_estimate[,2]
bowser_estimate[47,2]
image.mat <- cohort_replicate$cohort.replicate[,,47,2]
image.mat[image.mat==0] <- NA
datForClustr <- image.mat[!is.na(image.mat)]
result <- Mclust(datForClustr, G=1:2, interactive = FALSE)
den1 <- density(datForClustr[result$classification==1])
den2 <- density(datForClustr[result$classification==2])
intersection.point <- getCutoff(result, density1 = den1, density2 = den2, interval = interval.size)
image.ROI <- Binarize(image.mat, intersection.point)
k <- shapeKernel(c(r,r), type="box")
image.Filtered <- mmand::medianFilter(image.ROI, k)
q <- shapeKernel(c(2,2), type = "box")
image.Connected <- mmand::components(image.Filtered, q)
image(image.mat)
image(image.ROI)
image(image.Connected)
image.Vacuum <- Vacuum(image.Connected, size = vacuum.size)
image.final <- mmand::components(image.Vacuum, q)
image.final
image(image.final)
length(unique(as.vector(image.final[!is.na(image.final)])))
image.mat[image.mat==0] <- NA
datForClustr <- image.mat[!is.na(image.mat)]
result <- Mclust(datForClustr, G=1:2, interactive = FALSE)
den1 <- density(datForClustr[result$classification==1])
den2 <- density(datForClustr[result$classification==2])
intersection.point <- getCutoff(result, density1 = den1, density2 = den2, interval = interval.size)
image.ROI <- Binarize(image.mat, intersection.point)
k <- shapeKernel(c(r,r), type="box")
image.Filtered <- mmand::medianFilter(image.ROI, k)
q <- shapeKernel(c(2,2), type = "box")
image.Connected <- mmand::components(image.Filtered, q)
if(sum(!is.na(image.Connected)) !=0){
image.Vacuum <- Vacuum(image.Connected, size = vacuum.size)
image.final <- mmand::components(image.Vacuum, q)
num.Cluster <- length(unique(as.vector(image.final[!is.na(image.final)])))}else{
num.Cluster = 0
}
return(num.Cluster)
num.Cluster
j = 47
library(Bowser)
i = 2
j
i
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(extrantsr) # For image analysis
library(neurobase) # For image analysis
library(rdist) # For image analysis
library(mclust) # For fitting a mixture of normal distribution
library(mmand) # For median filtering and connecting component
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser(img, r=6, vacuum.size = 10)
bowser
document()
rm(list = c("bowser"))
document()
library(Bowser)
j
i
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(extrantsr) # For image analysis
library(neurobase) # For image analysis
library(rdist) # For image analysis
library(mclust) # For fitting a mixture of normal distribution
library(mmand) # For median filtering and connecting component
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser(img, r=6, vacuum.size = 10)
cohort_replicate <- dat
summary(cohort_replicate$N.cluster.rep)
image(cohort_replicate$cohort.replicate[,,3,3])
bowser_estimate <- array(0, dim = c(100,100))
for(i in 1:100){
for(j in 1:100){
img <- cohort_replicate$cohort.replicate[,,j,i]
bowser_estimate[j,i] <- bowser(img, r=6, vacuum.size = 10)
}
}
match_cluster <- rep(NA, 100)
for(i in 1:100){
match_cluster[i] <- sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i])
}
match_clustere
match_cluster
MAE_cluster <- rep(NA, 100)
for(i in 1:100){
MAE_cluster[i] <- mean(abs(bowser_estimate[,i] - cohort_replicate$N.cluster.rep[,i]))
}
MAE_cluster
mean(match_cluster)
mean(MAE_cluster)
library(Bowser)
bowser_estimate
saveRDS(bowser_estimate, "bowser_result.rds")
mean(bowser_estimate)
mean(match_cluster)
quantile(match_cluster, 0.025)
quantile(match_cluster, 0.975)
mean(MAE_cluster)
quantile(MAE_cluster, 0.025)
quantile(MAE_cluster, 0.875)
quantile(MAE_cluster, 0.975)
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(extrantsr) # For image analysis
library(neurobase) # For image analysis
library(rdist) # For image analysis
library(mclust) # For fitting a mixture of normal distribution
library(mmand) # For median filtering and connecting component
approx_cluster <- rep(NA, 100)
for(i in 1:100){
approx_cluster[i] <- sum(bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i] |
bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i] +1|
bowser_estimate[,i] == cohort_replicate$N.cluster.rep[,i] -1)
}
mean(approx_cluster)
bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==2),]
i = 1
sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==2),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==2),i])
which(cohort_replicate$N.cluster.rep[,i]==2)
sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==2),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==2),i]) / sum(cohort_replicate$N.cluster.rep[,i]==2)
match_cluster2 <- rep(NA, 100)
for(i in 1:100){
match_cluster2[i] <- sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==2),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==2),i]) / sum(cohort_replicate$N.cluster.rep[,i]==2)
}
match_cluster3 <- rep(NA, 100)
for(i in 1:100){
match_cluster3[i] <- sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==3),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==3),i]) / sum(cohort_replicate$N.cluster.rep[,i]==3)
}
match_cluster4 <- rep(NA, 100)
for(i in 1:100){
match_cluster4[i] <- sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==4),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==4),i]) / sum(cohort_replicate$N.cluster.rep[,i]==4)
}
match_cluster5 <- rep(NA, 100)
for(i in 1:100){
match_cluster5[i] <- sum(bowser_estimate[which(cohort_replicate$N.cluster.rep[,i]==5),i] == cohort_replicate$N.cluster.rep[which(cohort_replicate$N.cluster.rep[,i]==5),i]) / sum(cohort_replicate$N.cluster.rep[,i]==5)
}
mean(match_cluster2)
mean(match_cluster3)
mean(match_cluster4)
mean(match_cluster5)
?getRandomCluster
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
location = cbind(c(20,30,35), c(20,30,45)),
size = c(3,3,4),
int = c(200,300,400))
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
image(img)
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
image(img)
img
image(img$imgCluster)
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
img <- getRandomCluster(mask = mask_dat,
background.img = background_dat,
Ks = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(3,4,5,6),
ints = c(200,300,400))
image(img$imgCluster)
?getSimCluster
img <- getSimCluster(mask = mask_dat,
background.img = background_dat,
K = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = 5,
ints = 400)
img <- getSimCluster(mask = mask_dat,
background.img = background_dat,
K = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(5,5,5,5,5),
ints = c(400,400,400,400,400))
img
image(img)
img <- getSimCluster(mask = mask_dat,
background.img = background_dat,
K = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(6,6,6,6,6),
ints = c(400,400,400,400,400))
img <- getSimCluster(mask = mask_dat,
background.img = background_dat,
K = 5,
locations = cbind(c(26,18,31,40,40), c(16,31,46,21,57)),
sizes = c(6,6,6,6,6),
ints = c(400,400,400,400,400))
image(img)
img
img[img==0] <- NA
image(img)
match_cluster2
mean(match_cluster2)
sd(match_cluster2)
mean(match_cluster2)
quantile(match_cluster2, 0.025)
quantile(match_cluster2, 0.975)
mean(match_cluster3)
quantile(match_cluster3, 0.025)
quantile(match_cluster3, 0.975)
mean(match_cluster4)
quantile(match_cluster4, 0.025)
quantile(match_cluster4, 0.975)
mean(match_cluster5)
quantile(match_cluster5, 0.025)
quantile(match_cluster5, 0.975)
tab.cluster <- data.frame(Clusters = c(2,3,4,5),
Estimate = c("0.87 (0.75-0.96)",
"0.76 (0.61-0.90)",
"0.50 (0.33-0.70)",
"0.36 (0.15-0.54)"))
xtable(tab.cluster)
knitr::kable(tab.cluster)
library(Bowser)
library(devtools) # to install Caleb's package
library(dplyr) # For data analysis
library(ANTsR) # For image read
library(dplyr) # For data analysis
library(ANTsRCore)
library(ANTsRCore)
library(ITKR)
library(ITKR)
